{
	"deploy": {
		"VM:-": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"main:1": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"ropsten:3": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"rinkeby:4": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"kovan:42": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"goerli:5": {
			"linkReferences": {},
			"autoDeployLib": true
		},
		"Custom": {
			"linkReferences": {},
			"autoDeployLib": true
		}
	},
	"data": {
		"bytecode": {
			"functionDebugData": {},
			"generatedSources": [],
			"linkReferences": {},
			"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122089e86a11f4eb1e801e60e914b96aca0e8966ae59f25e96d71bc01455c702dea764736f6c634300080a0033",
			"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 0xE8 PUSH11 0x11F4EB1E801E60E914B96A 0xCA 0xE DUP10 PUSH7 0xAE59F25E96D71B 0xC0 EQ SSTORE 0xC7 MUL 0xDE 0xA7 PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP CALLER ",
			"sourceMap": "2002:23698:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
		},
		"deployedBytecode": {
			"functionDebugData": {},
			"generatedSources": [],
			"immutableReferences": {},
			"linkReferences": {},
			"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122089e86a11f4eb1e801e60e914b96aca0e8966ae59f25e96d71bc01455c702dea764736f6c634300080a0033",
			"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 0xE8 PUSH11 0x11F4EB1E801E60E914B96A 0xCA 0xE DUP10 PUSH7 0xAE59F25E96D71B 0xC0 EQ SSTORE 0xC7 MUL 0xDE 0xA7 PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP CALLER ",
			"sourceMap": "2002:23698:0:-:0;;;;;;;;"
		},
		"gasEstimates": {
			"creation": {
				"codeDepositCost": "17200",
				"executionCost": "97",
				"totalCost": "17297"
			},
			"internal": {
				"beyond(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"compare(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"concat(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"contains(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"copy(struct strings.slice memory)": "infinite",
				"count(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"empty(struct strings.slice memory)": "infinite",
				"endsWith(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"equals(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"find(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"findPtr(uint256,uint256,uint256,uint256)": "infinite",
				"join(struct strings.slice memory,struct strings.slice memory[] memory)": "infinite",
				"keccak(struct strings.slice memory)": "infinite",
				"len(bytes32)": "infinite",
				"len(struct strings.slice memory)": "infinite",
				"memcpy(uint256,uint256,uint256)": "infinite",
				"nextRune(struct strings.slice memory)": "infinite",
				"nextRune(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"ord(struct strings.slice memory)": "infinite",
				"rfind(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"rfindPtr(uint256,uint256,uint256,uint256)": "infinite",
				"rsplit(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"rsplit(struct strings.slice memory,struct strings.slice memory,struct strings.slice memory)": "infinite",
				"split(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"split(struct strings.slice memory,struct strings.slice memory,struct strings.slice memory)": "infinite",
				"startsWith(struct strings.slice memory,struct strings.slice memory)": "infinite",
				"toSlice(string memory)": "infinite",
				"toSliceB32(bytes32)": "infinite",
				"toString(struct strings.slice memory)": "infinite",
				"until(struct strings.slice memory,struct strings.slice memory)": "infinite"
			}
		},
		"methodIdentifiers": {}
	},
	"abi": []
}